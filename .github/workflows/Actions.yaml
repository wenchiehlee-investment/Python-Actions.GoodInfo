name: GoodInfo Downloader v1.5.0

on:
  # Enhanced scheduling - Rotating Types 1,4,6,7 (one per day) + Daily Type 5
  schedule:
    # 4-day rotation - Only one of these types runs per day
    - cron: '0 8 * * 1'    # Monday at 8 AM UTC (4 PM Taiwan) - Dividend Data (Type 1)
    - cron: '0 8 * * 2'    # Tuesday at 8 AM UTC (4 PM Taiwan) - Business Performance (Type 4)
    - cron: '0 8 * * 3'    # Wednesday at 8 AM UTC (4 PM Taiwan) - Equity Distribution (Type 6)
    - cron: '0 8 * * 4'    # Thursday at 8 AM UTC (4 PM Taiwan) - Quarterly Performance (Type 7)
    
    # Daily run - Type 5 continues daily
    - cron: '0 12 * * *'   # Daily at 12 PM UTC (8 PM Taiwan) - Monthly Revenue (Type 5)
  
  # Allow manual trigger for all 7 data types
  workflow_dispatch:
    inputs:
      data_type:
        description: 'Data type to download'
        required: false
        default: '1'
        type: choice
        options:
        - '1'
        - '2' 
        - '3'
        - '4'
        - '5'
        - '6'
        - '7'
      test_mode:
        description: 'Test mode (only first 3 stocks)'
        required: false
        default: false
        type: boolean

jobs:
  download:
    runs-on: ubuntu-latest
    timeout-minutes: 240  # ÊúÄÂ§öÂèØË®≠Âà∞360Ôºà6Â∞èÊôÇÔºâ
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
    
    - name: Setup Chrome
      run: |
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable xvfb
    
    - name: Download latest stock observation list
      run: |
        echo "üìã Downloading latest Taiwan stock observation list..."
        python GetËßÄÂØüÂêçÂñÆ.py
        
        echo "üìä Stock list status:"
        if [ -f "StockID_TWSE_TPEX.csv" ]; then
          echo "‚úÖ Stock list downloaded successfully"
          echo "üìà Total stocks: $(tail -n +2 StockID_TWSE_TPEX.csv | wc -l)"
          echo "üîç First 5 stocks:"
          head -6 StockID_TWSE_TPEX.csv
        else
          echo "‚ùå Failed to download stock list"
          exit 1
        fi
    
    - name: Determine execution parameters
      id: params
      run: |
        # Determine data type based on trigger
        if [[ "${{ github.event_name }}" == "schedule" ]]; then
          # For scheduled runs, determine type by day of week and hour
          HOUR=$(date -u +%H)
          DAY_OF_WEEK=$(date -u +%u)  # 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday, 7=Sunday
          
          if [[ "$HOUR" == "08" ]]; then
            # 8 AM UTC - Rotating types based on day of week
            case $DAY_OF_WEEK in
              1) DATA_TYPE="1"; echo "üïê Monday scheduled run: 8 AM UTC - Dividend Policy Data" ;;
              2) DATA_TYPE="4"; echo "üïê Tuesday scheduled run: 8 AM UTC - Business Performance Data" ;;
              3) DATA_TYPE="6"; echo "üïê Wednesday scheduled run: 8 AM UTC - Equity Distribution Data" ;;
              4) DATA_TYPE="7"; echo "üïê Thursday scheduled run: 8 AM UTC - Quarterly Performance Data" ;;
              *) DATA_TYPE="1"; echo "üïê Weekend/Friday scheduled run: Default to Dividend Data" ;;
            esac
          elif [[ "$HOUR" == "12" ]]; then
            DATA_TYPE="5"  # 12 PM UTC = Monthly revenue data (Daily)
            echo "üïê Daily scheduled run: 12 PM UTC - Monthly Revenue Data"
          else
            DATA_TYPE="1"  # Default fallback
            echo "üïê Scheduled run detected: Default to Dividend Data"
          fi
        else
          # Manual trigger - use input
          DATA_TYPE="${{ github.event.inputs.data_type || '1' }}"
          echo "üñ±Ô∏è Manual trigger detected: Data Type $DATA_TYPE"
        fi
        
        echo "data_type=$DATA_TYPE" >> $GITHUB_OUTPUT
        
        # Set test mode flag
        if [[ "${{ github.event.inputs.test_mode }}" == "true" ]]; then
          echo "test_flag=--test" >> $GITHUB_OUTPUT
          echo "mode_desc=Test Mode (3 stocks)" >> $GITHUB_OUTPUT
        else
          echo "test_flag=" >> $GITHUB_OUTPUT
          echo "mode_desc=Full Mode (all stocks)" >> $GITHUB_OUTPUT
        fi
        
        # Set data type description and frequency (updated frequencies)
        case $DATA_TYPE in
          1) echo "data_desc=Dividend Policy" >> $GITHUB_OUTPUT 
             echo "frequency=Weekly (Monday)" >> $GITHUB_OUTPUT ;;
          2) echo "data_desc=Basic Info" >> $GITHUB_OUTPUT 
             echo "frequency=Manual" >> $GITHUB_OUTPUT ;;
          3) echo "data_desc=Stock Details" >> $GITHUB_OUTPUT 
             echo "frequency=Manual" >> $GITHUB_OUTPUT ;;
          4) echo "data_desc=Business Performance" >> $GITHUB_OUTPUT 
             echo "frequency=Weekly (Tuesday)" >> $GITHUB_OUTPUT ;;
          5) echo "data_desc=Monthly Revenue" >> $GITHUB_OUTPUT 
             echo "frequency=Daily" >> $GITHUB_OUTPUT ;;
          6) echo "data_desc=Equity Distribution" >> $GITHUB_OUTPUT 
             echo "frequency=Weekly (Wednesday)" >> $GITHUB_OUTPUT ;;
          7) echo "data_desc=Quarterly Performance" >> $GITHUB_OUTPUT 
             echo "frequency=Weekly (Thursday)" >> $GITHUB_OUTPUT ;;
        esac
    
    - name: Run batch download
      run: |
        export DISPLAY=:99
        Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
        sleep 3
        
        echo "üöÄ Starting enhanced batch download (v1.5.0)..."
        echo "üìä Data Type: ${{ steps.params.outputs.data_desc }} (Type ${{ steps.params.outputs.data_type }})"
        echo "‚è∞ Frequency: ${{ steps.params.outputs.frequency }}"
        echo "üîß Mode: ${{ steps.params.outputs.mode_desc }}"
        echo "‚è∞ Start time: $(date)"
        echo "üåê Trigger: ${{ github.event_name }}"
        
        # Show special workflow information for enhanced types
        case "${{ steps.params.outputs.data_type }}" in
          5) echo "üîÑ Special Workflow: Monthly Revenue - Auto-click 'Êü•20Âπ¥' button" ;;
          6) echo "üìà NEW! Equity Distribution - Shareholder structure analysis" ;;
          7) echo "üîÑ NEW! Special Workflow: Quarterly Performance - Special URL + Auto-click 'Êü•60Âπ¥' button" ;;
        esac
        
        echo "=========================================="
        
        # Run GetAll.py with parameters
        set +e  # Disable exit on error
        python GetAll.py ${{ steps.params.outputs.data_type }} ${{ steps.params.outputs.test_flag }} 
        set -e  # Re-enable exit on error
        
        echo "=========================================="
        echo "‚úÖ Enhanced batch download completed at: $(date)"
        
        # Show comprehensive summary of downloaded files for all 7 data types
        echo "üìÅ Downloaded files summary (All 7 Data Types):"
        
        if [ -d "DividendDetail" ]; then
          DIVIDEND_COUNT=$(find DividendDetail -name "*.xls*" 2>/dev/null | wc -l)
          echo "üí∞ Dividend files: $DIVIDEND_COUNT"
        fi
        
        if [ -d "BasicInfo" ]; then
          BASIC_COUNT=$(find BasicInfo -name "*.xls*" 2>/dev/null | wc -l)
          echo "üìã Basic info files: $BASIC_COUNT"
        fi
        
        if [ -d "StockDetail" ]; then
          DETAIL_COUNT=$(find StockDetail -name "*.xls*" 2>/dev/null | wc -l)
          echo "üìà Stock detail files: $DETAIL_COUNT"
        fi
        
        if [ -d "StockBzPerformance" ]; then
          PERFORMANCE_COUNT=$(find StockBzPerformance -name "*.xls*" 2>/dev/null | wc -l)
          echo "üè¢ Business performance files: $PERFORMANCE_COUNT"
        fi
        
        if [ -d "ShowSaleMonChart" ]; then
          REVENUE_COUNT=$(find ShowSaleMonChart -name "*.xls*" 2>/dev/null | wc -l)
          echo "üìä Monthly revenue files: $REVENUE_COUNT"
        fi
        
        if [ -d "EquityDistribution" ]; then
          EQUITY_COUNT=$(find EquityDistribution -name "*.xls*" 2>/dev/null | wc -l)
          echo "üèõÔ∏è Equity distribution files: $EQUITY_COUNT (NEW!)"
        fi
        
        if [ -d "StockBzPerformance1" ]; then
          QUARTERLY_COUNT=$(find StockBzPerformance1 -name "*.xls*" 2>/dev/null | wc -l)
          echo "üìà Quarterly performance files: $QUARTERLY_COUNT (NEW!)"
        fi
        
        # Calculate total files
        TOTAL_FILES=0
        for dir in DividendDetail BasicInfo StockDetail StockBzPerformance ShowSaleMonChart EquityDistribution StockBzPerformance1; do
          if [ -d "$dir" ]; then
            COUNT=$(find "$dir" -name "*.xls*" 2>/dev/null | wc -l)
            TOTAL_FILES=$((TOTAL_FILES + COUNT))
          fi
        done
        echo "üéØ Total XLS files: $TOTAL_FILES"
    
    - name: Commit and Push Results
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        
        # Add updated stock list
        git add StockID_TWSE_TPEX.csv || true
        
        # Add downloaded XLS files for all 7 data types
        git add DividendDetail/*.xls || true
        git add BasicInfo/*.xls || true
        git add StockDetail/*.xls || true
        git add StockBzPerformance/*.xls || true
        rm ShowSaleMonChart/SaleMonDetail*.xls || true
        git add ShowSaleMonChart/*.xls || true
        git add EquityDistribution/*.xls || true
        git add StockBzPerformance1/*.xls || true
      


        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "üìù No changes to commit"
        else
          # Create enhanced commit message with frequency information
          COMMIT_MSG="‚¨ÜÔ∏è GitHub Actions: ${{ steps.params.outputs.data_desc }} Data Update"
          
          # Add frequency badge
          case "${{ steps.params.outputs.frequency }}" in
            Daily) COMMIT_MSG="$COMMIT_MSG [Daily]" ;;
            Weekly*) COMMIT_MSG="$COMMIT_MSG [Weekly]" ;;
            Monthly) COMMIT_MSG="$COMMIT_MSG [Monthly]" ;;
            Manual) COMMIT_MSG="$COMMIT_MSG [Manual]" ;;
          esac
          
          if [[ "${{ steps.params.outputs.test_flag }}" == "--test" ]]; then
            COMMIT_MSG="$COMMIT_MSG (Test Mode)"
          fi
          
          # Add trigger type and version to commit message
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            COMMIT_MSG="$COMMIT_MSG [Auto-v1.5.0]"
          else
            COMMIT_MSG="$COMMIT_MSG [Manual-v1.5.0]"
          fi
          
          COMMIT_MSG="$COMMIT_MSG - $(date '+%Y-%m-%d %H:%M UTC')"
          
          git commit -m "$COMMIT_MSG" || true
          git push || true
          
          echo "‚úÖ Changes committed and pushed successfully"
        fi
    
    - name: Generate Enhanced Summary
      if: always()
      run: |
        echo "üìä === Enhanced GitHub Actions Execution Summary (v1.5.0) ==="
        echo "üïê Execution Time: $(date)"
        echo "üìã Data Type: ${{ steps.params.outputs.data_desc }} (Type ${{ steps.params.outputs.data_type }})"
        echo "‚è∞ Frequency: ${{ steps.params.outputs.frequency }}"
        echo "üîß Mode: ${{ steps.params.outputs.mode_desc }}"
        echo "üåê Trigger: ${{ github.event_name }}"
        echo "üìÅ Repository: ${{ github.repository }}"
        echo "üåü Workflow: ${{ github.workflow }}"
        echo "üöÄ Version: 1.5.0 - Complete 7 Data Types"
        echo ""
        echo "üìà Enhanced Automation Schedule:"
        echo "   Monday 8 AM UTC: Type 1 (Dividend Policy)"
        echo "   Tuesday 8 AM UTC: Type 4 (Business Performance)"
        echo "   Wednesday 8 AM UTC: Type 6 (Equity Distribution)"
        echo "   Thursday 8 AM UTC: Type 7 (Quarterly Performance)"
        echo "   Daily 12 PM UTC: Type 5 (Monthly Revenue)"
        echo "   Manual (24/7): Types 2, 3 - On-demand data"
        echo ""
        echo "üéØ Next scheduled runs:"
        TODAY=$(date -u +%u)
        case $TODAY in
          1) echo "   Today: Type 1 (Dividend Policy) + Type 5 (Monthly Revenue)"
             echo "   Tomorrow: Type 4 (Business Performance) + Type 5 (Monthly Revenue)" ;;
          2) echo "   Today: Type 4 (Business Performance) + Type 5 (Monthly Revenue)"
             echo "   Tomorrow: Type 6 (Equity Distribution) + Type 5 (Monthly Revenue)" ;;
          3) echo "   Today: Type 6 (Equity Distribution) + Type 5 (Monthly Revenue)"
             echo "   Tomorrow: Type 7 (Quarterly Performance) + Type 5 (Monthly Revenue)" ;;
          4) echo "   Today: Type 7 (Quarterly Performance) + Type 5 (Monthly Revenue)"
             echo "   Tomorrow: Type 5 (Monthly Revenue) only" ;;
          *) echo "   Today: Type 5 (Monthly Revenue) only"
             echo "   Monday: Type 1 (Dividend Policy) + Type 5 (Monthly Revenue)" ;;
        esac
        echo "=========================================="