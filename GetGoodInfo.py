#!/usr/bin/env python3
"""
GetGoodInfo.py - Enhanced with Complete 12 Data Types including EPS x PER Monthly
Version: 2.0.0.0 - Complete 12 Data Types with Long-Term Monthly P/E Analysis
Added Type 12: EPS x PER Monthly with 20-year historical data and conservative P/E multiples
Fixes SSL issues, improves download detection, better Windows compatibility
"""

import requests
import pandas as pd
from bs4 import BeautifulSoup
import time
import os
import re
import random
import sys
import tempfile
import uuid
import shutil
import subprocess
import platform
from datetime import datetime
from urllib.parse import urljoin, urlparse

# Global variable for stock names mapping
STOCK_NAMES = {}

def load_stock_names_from_csv(csv_file='StockID_TWSE_TPEX.csv'):
    """Load stock ID to company name mapping from CSV file"""
    global STOCK_NAMES
    
    try:
        if not os.path.exists(csv_file):
            print(f"Ë≠¶Âëä CSV file '{csv_file}' not found in current directory")
            print("‰ΩøÁî® Using fallback stock names...")
            STOCK_NAMES = {
                '2330': 'Âè∞Á©çÈõª',
                '0050': 'ÂÖÉÂ§ßÂè∞ÁÅ£50',
                '2454': 'ËÅØÁôºÁßë',
                '2317': 'È¥ªÊµ∑',
                '1301': 'Âè∞Â°ë'
            }
            return False
        
        print(f"ËºâÂÖ• Loading stock names from {csv_file}...")
        df = pd.read_csv(csv_file, encoding='utf-8')
        
        if '‰ª£Ëôü' not in df.columns or 'ÂêçÁ®±' not in df.columns:
            print("ÈåØË™§ CSV file must contain '‰ª£Ëôü' and 'ÂêçÁ®±' columns")
            return False
        
        STOCK_NAMES = {}
        for _, row in df.iterrows():
            stock_id = str(row['‰ª£Ëôü']).strip()
            company_name = str(row['ÂêçÁ®±']).strip()
            if stock_id and company_name:
                STOCK_NAMES[stock_id] = company_name
        
        print(f"ÂÆåÊàê Loaded {len(STOCK_NAMES)} stock mappings from CSV")
        return True
        
    except Exception as e:
        print(f"ÈåØË™§ Error reading CSV file: {e}")
        print("‰ΩøÁî® Using fallback stock names...")
        STOCK_NAMES = {
            '2330': 'Âè∞Á©çÈõª',
            '0050': 'ÂÖÉÂ§ßÂè∞ÁÅ£50',
            '2454': 'ËÅØÁôºÁßë',
            '2317': 'È¥ªÊµ∑',
            '1301': 'Âè∞Â°ë'
        }
        return False

# Enhanced data type mapping - Complete 12 Data Types (v2.0.0)
DATA_TYPES = {
    '1': ('dividend', 'DividendDetail', 'StockDividendPolicy.asp'),
    '2': ('basic', 'BasicInfo', 'BasicInfo.asp'),
    '3': ('detail', 'StockDetail', 'StockDetail.asp'),
    '4': ('performance', 'StockBzPerformance', 'StockBzPerformance.asp'),
    '5': ('revenue', 'ShowSaleMonChart', 'ShowSaleMonChart.asp'),
    '6': ('equity', 'EquityDistribution', 'EquityDistributionCatHis.asp'),
    '7': ('performance_quarter', 'StockBzPerformance1', 'StockBzPerformance.asp'),
    '8': ('eps_per_weekly', 'ShowK_ChartFlow', 'ShowK_ChartFlow.asp'),
    '9': ('quarterly_analysis', 'StockHisAnaQuar', 'StockHisAnaQuar.asp'),
    '10': ('equity_class_weekly', 'EquityDistributionClassHis', 'EquityDistributionClassHis.asp'),
    '11': ('weekly_trading_data', 'WeeklyTradingData', 'ShowK_Chart.asp'),
    '12': ('eps_per_monthly', 'ShowMonthlyK_ChartFlow', 'ShowK_ChartFlow.asp')  # üÜï NEW Type 12
}

def improved_chrome_cleanup():
    """IMPROVED: Windows-compatible Chrome cleanup"""
    print("Ê∏ÖÁêÜ Improved Chrome cleanup...")
    
    killed_count = 0
    
    try:
        import psutil
        for proc in psutil.process_iter(['pid', 'name']):
            try:
                if proc.info['name'] and any(chrome_name in proc.info['name'].lower() 
                                           for chrome_name in ['chrome', 'chromedriver']):
                    proc.kill()
                    killed_count += 1
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                pass
    except ImportError:
        pass
    
    # IMPROVED: Windows-specific cleanup
    if platform.system() == "Windows":
        try:
            # Use proper Windows commands
            result1 = subprocess.run(['taskkill', '/f', '/im', 'chrome.exe'], 
                         capture_output=True, text=True, timeout=10)
            result2 = subprocess.run(['taskkill', '/f', '/im', 'chromedriver.exe'], 
                         capture_output=True, text=True, timeout=10)
            
            if result1.returncode == 0 or result2.returncode == 0:
                killed_count += 1
                
        except Exception as e:
            print(f"   Windows cleanup warning: {e}")
    else:
        try:
            subprocess.run(['pkill', '-f', 'chrome'], capture_output=True, timeout=10)
            subprocess.run(['pkill', '-f', 'chromedriver'], capture_output=True, timeout=10)
        except Exception as e:
            print(f"   Unix cleanup warning: {e}")
    
    time.sleep(2)
    print(f"ÂÆåÊàê Cleanup completed: {killed_count} processes")
    return True

def wait_for_download_with_validation(download_dir, expected_patterns, timeout_seconds=15, check_interval=1):
    """IMPROVED: Wait for download with proper validation"""
    print(f"   Á≠âÂæÖ‰∏ãËºâ Waiting for download in {download_dir}...")
    
    initial_files = set()
    if os.path.exists(download_dir):
        initial_files = set(os.listdir(download_dir))
    
    start_time = time.time()
    
    for elapsed in range(0, timeout_seconds, check_interval):
        time.sleep(check_interval)
        
        if not os.path.exists(download_dir):
            continue
            
        current_files = set(os.listdir(download_dir))
        new_files = current_files - initial_files
        
        # Check for completed downloads (not .crdownload)
        completed_downloads = [f for f in new_files 
                             if f.endswith(('.xls', '.xlsx')) 
                             and not f.endswith('.crdownload')
                             and not f.endswith('.tmp')]
        
        if completed_downloads:
            for downloaded_file in completed_downloads:
                file_path = os.path.join(download_dir, downloaded_file)
                
                # Validate file size and content
                try:
                    file_size = os.path.getsize(file_path)
                    if file_size > 1024:  # At least 1KB
                        # Quick content validation
                        with open(file_path, 'rb') as f:
                            header = f.read(512)
                            # Check if it looks like an Excel file or HTML-formatted Excel
                            if (header.startswith(b'\xd0\xcf\x11\xe0') or  # OLE
                               header.startswith(b'PK') or  # ZIP-based Excel
                               b'<html' in header.lower() or  # HTML table exported as XLS
                               b'microsoft' in header.lower() or
                               b'excel' in header.lower()):
                                
                                print(f"   ‚úÖ È©óË≠âÊàêÂäü Valid download: {downloaded_file} ({file_size} bytes)")
                                return downloaded_file, file_path
                        
                        print(f"   ‚ö†Ô∏è Ê™îÊ°àÊ†ºÂºèÁñëÊÖÆ Questionable file format: {downloaded_file}")
                        return downloaded_file, file_path  # Return anyway, might be valid
                    else:
                        print(f"   ‚ùå Ê™îÊ°àÂ§™Â∞è File too small: {downloaded_file} ({file_size} bytes)")
                        
                except Exception as e:
                    print(f"   ‚ùå Ê™îÊ°àÈ©óË≠âÈåØË™§ File validation error: {e}")
        
        # Show progress
        if elapsed % 5 == 0 and elapsed > 0:
            print(f"   ‚è≥ Á≠âÂæÖ‰∏≠ Still waiting... ({elapsed}/{timeout_seconds}s)")
    
    print(f"   ‚ùå ‰∏ãËºâË∂ÖÊôÇ Download timeout after {timeout_seconds}s")
    return None, None

def selenium_download_xls_improved(stock_id, data_type_code):
    """ENHANCED: Selenium download with complete 12 data types support including Type 12"""
    
    improved_chrome_cleanup()
    
    try:
        from selenium import webdriver
        from selenium.webdriver.chrome.service import Service
        from selenium.webdriver.chrome.options import Options
        from selenium.webdriver.common.by import By
        from selenium.webdriver.support.ui import WebDriverWait
        from selenium.webdriver.support import expected_conditions as EC
        from selenium.common.exceptions import TimeoutException, WebDriverException
        from webdriver_manager.chrome import ChromeDriverManager
        
        if data_type_code not in DATA_TYPES:
            print(f"ÈåØË™§ Invalid data type: {data_type_code}")
            return False
        
        page_type, folder_name, asp_file = DATA_TYPES[data_type_code]
        company_name = STOCK_NAMES.get(stock_id, f'ËÇ°Á•®{stock_id}')
        
        if not os.path.exists(folder_name):
            os.makedirs(folder_name)
            print(f"Âª∫Á´ã Created folder: {folder_name}")
        
        print(f"ÈñãÂßã Starting ENHANCED download for {stock_id} ({company_name}) - {folder_name}")
        
        # IMPROVED: Chrome setup with better SSL handling
        chrome_options = Options()
        
        download_dir = os.path.join(os.getcwd(), folder_name)
        prefs = {
            "download.default_directory": download_dir,
            "download.prompt_for_download": False,
            "download.directory_upgrade": True,
            "safebrowsing.enabled": False,
            "profile.default_content_settings.popups": 0,
            "profile.default_content_setting_values.notifications": 2,
        }
        chrome_options.add_experimental_option("prefs", prefs)
        
        # IMPROVED: Better Chrome arguments for stability
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--headless=new")
        chrome_options.add_argument("--disable-images")
        chrome_options.add_argument("--disable-extensions")
        chrome_options.add_argument("--disable-plugins")
        chrome_options.add_argument("--no-first-run")
        chrome_options.add_argument("--disable-default-apps")
        chrome_options.add_argument("--disable-background-networking")
        chrome_options.add_argument("--remote-debugging-port=0")
        
        # IMPROVED: SSL and security settings
        chrome_options.add_argument("--ignore-ssl-errors")
        chrome_options.add_argument("--ignore-certificate-errors")
        chrome_options.add_argument("--ignore-certificate-errors-spki-list")
        chrome_options.add_argument("--ignore-certificate-errors-ssl")
        chrome_options.add_argument("--allow-running-insecure-content")
        chrome_options.add_argument("--disable-web-security")
        chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
        
        print("Ë®≠ÂÆö Using improved headless mode with SSL handling")
        
        driver = None
        try:
            service = Service(ChromeDriverManager().install())
            driver = webdriver.Chrome(service=service, options=chrome_options)
            print("ÊàêÂäü Chrome WebDriver started successfully")
        except Exception as driver_error:
            print(f"Â§±Êïó Failed to start Chrome WebDriver: {driver_error}")
            return False
        
        try:
            # IMPROVED: More generous timeouts for SSL issues
            driver.set_page_load_timeout(30)  # Increased for SSL issues
            driver.implicitly_wait(5)
            
            # ENHANCED: Build URL with support for Type 12
            if data_type_code == '7':
                url = f"https://goodinfo.tw/tw/{asp_file}?STOCK_ID={stock_id}&YEAR_PERIOD=9999&PRICE_ADJ=F&SCROLL2Y=480&RPT_CAT=M_QUAR"
                print(f"‰ΩøÁî® Using quarterly performance URL with special parameters")
            elif data_type_code == '8':
                url = f"https://goodinfo.tw/tw/{asp_file}?RPT_CAT=PER&STOCK_ID={stock_id}"
                print(f"‰ΩøÁî® Using EPS x PER weekly URL with special parameters")
            elif data_type_code == '11':
                url = f"https://goodinfo.tw/tw/{asp_file}?STOCK_ID={stock_id}&CHT_CAT=WEEK&PRICE_ADJ=F&SCROLL2Y=600"
                print(f"‰ΩøÁî® Using weekly trading data URL with special parameters")
            elif data_type_code == '12':
                url = f"https://goodinfo.tw/tw/{asp_file}?RPT_CAT=PER&STOCK_ID={stock_id}&CHT_CAT=MONTH&SCROLL2Y=439"
                print(f"‰ΩøÁî® Using monthly P/E URL with special parameters [NEW!]")
            else:
                url = f"https://goodinfo.tw/tw/{asp_file}?STOCK_ID={stock_id}"
            
            print(f"Ë®™Âïè Accessing: {url}")
            
            # IMPROVED: Navigate with better error handling
            try:
                driver.get(url)
                print("   ‚úÖ È†ÅÈù¢ËºâÂÖ•ÊàêÂäü Page loaded successfully")
            except TimeoutException:
                print("   ‚ö†Ô∏è È†ÅÈù¢ËºâÂÖ•Ë∂ÖÊôÇÔºå‰ΩÜÁπºÁ∫åÂòóË©¶ Page load timeout, but continuing...")
            except Exception as e:
                print(f"   ‚ùå È†ÅÈù¢ËºâÂÖ•ÈåØË™§ Page load error: {e}")
                return False
            
            # IMPROVED: Wait for page elements
            print("Á≠âÂæÖ Waiting for page elements...")
            try:
                WebDriverWait(driver, 15).until(
                    EC.presence_of_element_located((By.TAG_NAME, "body"))
                )
                print("   ‚úÖ È†ÅÈù¢‰∏ªÈ´îËºâÂÖ•ÂÆåÊàê Page body loaded")
            except TimeoutException:
                print("   ‚ö†Ô∏è È†ÅÈù¢‰∏ªÈ´îËºâÂÖ•Ë∂ÖÊôÇÔºå‰ΩÜÁπºÁ∫å Page body timeout, but continuing...")
            
            # IMPROVED: Wait for initialization
            max_wait = 8
            for wait_time in range(max_wait):
                try:
                    page_source = driver.page_source
                    if 'initializing' not in page_source.lower() and 'ÂàùÂßãÂåñ‰∏≠' not in page_source:
                        print("   ‚úÖ È†ÅÈù¢ÂàùÂßãÂåñÂÆåÊàê Page initialization completed")
                        break
                except:
                    pass
                
                if wait_time < max_wait - 1:
                    print(f"   ‚è≥ ÂàùÂßãÂåñ‰∏≠ Still initializing... ({wait_time + 1}/{max_wait})")
                    time.sleep(1)
                else:
                    print("   ‚ö†Ô∏è ÂàùÂßãÂåñË∂ÖÊôÇÔºå‰ΩÜÁπºÁ∫å Initialization timeout, but continuing...")
            
            time.sleep(3)  # Additional stabilization time
            
            # ENHANCED: Handle special workflows including new Type 12
            if data_type_code == '5':
                print("ËôïÁêÜ IMPROVED workflow for Monthly Revenue data...")
                try:
                    twenty_year_button = WebDriverWait(driver, 8).until(
                        EC.element_to_be_clickable((By.XPATH, "//input[@value='Êü•20Âπ¥'] | //button[contains(text(), 'Êü•20Âπ¥')] | //a[contains(text(), 'Êü•20Âπ¥')]"))
                    )
                    print("   ÈªûÊìä Clicking 'Êü•20Âπ¥' button...")
                    driver.execute_script("arguments[0].click();", twenty_year_button)
                    time.sleep(5)  # Wait 5 seconds for data loading
                    print("   ‚úÖ ÁâπÊÆäÊåâÈàïÈªûÊìäÂÆåÊàê Special button clicked")
                except TimeoutException:
                    print("   ‚ö†Ô∏è 'Êü•20Âπ¥' ÊåâÈàïÊú™ÊâæÂà∞ÔºåÁπºÁ∫åXLSÊêúÂ∞ã Button not found, proceeding with XLS search...")
            
            elif data_type_code == '7':
                print("ËôïÁêÜ IMPROVED workflow for Quarterly Business Performance data...")
                try:
                    sixty_year_button = WebDriverWait(driver, 8).until(
                        EC.element_to_be_clickable((By.XPATH, "//input[@value='Êü•60Âπ¥'] | //button[contains(text(), 'Êü•60Âπ¥')] | //a[contains(text(), 'Êü•60Âπ¥')]"))
                    )
                    print("   ÈªûÊìä Clicking 'Êü•60Âπ¥' button...")
                    driver.execute_script("arguments[0].click();", sixty_year_button)
                    time.sleep(5)  # Wait 5 seconds for data loading
                    print("   ‚úÖ ÁâπÊÆäÊåâÈàïÈªûÊìäÂÆåÊàê Special button clicked")
                except TimeoutException:
                    print("   ‚ö†Ô∏è 'Êü•60Âπ¥' ÊåâÈàïÊú™ÊâæÂà∞ÔºåÁπºÁ∫åXLSÊêúÂ∞ã Button not found, proceeding with XLS search...")
            
            elif data_type_code == '8':
                print("ËôïÁêÜ IMPROVED workflow for EPS x PER Weekly data...")
                try:
                    five_year_button = WebDriverWait(driver, 8).until(
                        EC.element_to_be_clickable((By.XPATH, "//input[@value='Êü•5Âπ¥'] | //button[contains(text(), 'Êü•5Âπ¥')] | //a[contains(text(), 'Êü•5Âπ¥')]"))
                    )
                    print("   ÈªûÊìä Clicking 'Êü•5Âπ¥' button...")
                    driver.execute_script("arguments[0].click();", five_year_button)
                    time.sleep(5)  # Wait 5 seconds for data loading
                    print("   ‚úÖ ÁâπÊÆäÊåâÈàïÈªûÊìäÂÆåÊàê Special button clicked")
                except TimeoutException:
                    print("   ‚ö†Ô∏è 'Êü•5Âπ¥' ÊåâÈàïÊú™ÊâæÂà∞ÔºåÁπºÁ∫åXLSÊêúÂ∞ã Button not found, proceeding with XLS search...")
            
            elif data_type_code == '10':
                print("ËôïÁêÜ IMPROVED workflow for Equity Class Weekly data...")
                try:
                    five_year_button = WebDriverWait(driver, 8).until(
                        EC.element_to_be_clickable((By.XPATH, "//input[@value='Êü•5Âπ¥'] | //button[contains(text(), 'Êü•5Âπ¥')] | //a[contains(text(), 'Êü•5Âπ¥')]"))
                    )
                    print("   ÈªûÊìä Clicking 'Êü•5Âπ¥' button...")
                    driver.execute_script("arguments[0].click();", five_year_button)
                    time.sleep(5)  # Wait 5 seconds for data loading
                    print("   ‚úÖ ÁâπÊÆäÊåâÈàïÈªûÊìäÂÆåÊàê Special button clicked")
                except TimeoutException:
                    print("   ‚ö†Ô∏è 'Êü•5Âπ¥' ÊåâÈàïÊú™ÊâæÂà∞ÔºåÁπºÁ∫åXLSÊêúÂ∞ã Button not found, proceeding with XLS search...")
            
            elif data_type_code == '11':
                print("ËôïÁêÜ ENHANCED workflow for Weekly Trading Data with Institutional Flows...")
                try:
                    five_year_button = WebDriverWait(driver, 8).until(
                        EC.element_to_be_clickable((By.XPATH, "//input[@value='Êü•5Âπ¥'] | //button[contains(text(), 'Êü•5Âπ¥')] | //a[contains(text(), 'Êü•5Âπ¥')]"))
                    )
                    print("   ÈªûÊìä Clicking 'Êü•5Âπ¥' button for comprehensive trading data...")
                    driver.execute_script("arguments[0].click();", five_year_button)
                    time.sleep(5)  # Wait 5 seconds for institutional data loading
                    print("   ‚úÖ ÈÄ±‰∫§ÊòìË≥áÊñôÁâπÊÆäÊåâÈàïÈªûÊìäÂÆåÊàê Weekly trading data special button clicked")
                except TimeoutException:
                    print("   ‚ö†Ô∏è 'Êü•5Âπ¥' ÊåâÈàïÊú™ÊâæÂà∞ÔºåÁπºÁ∫åXLSÊêúÂ∞ã Button not found, proceeding with XLS search...")
            
            elif data_type_code == '12':
                print("ËôïÁêÜ NEW! ENHANCED workflow for EPS x PER Monthly data...")
                try:
                    twenty_year_button = WebDriverWait(driver, 8).until(
                        EC.element_to_be_clickable((By.XPATH, "//input[@value='Êü•20Âπ¥'] | //button[contains(text(), 'Êü•20Âπ¥')] | //a[contains(text(), 'Êü•20Âπ¥')]"))
                    )
                    print("   ÈªûÊìä Clicking 'Êü•20Âπ¥' button for 20-year monthly P/E data...")
                    driver.execute_script("arguments[0].click();", twenty_year_button)
                    time.sleep(5)  # Wait 5 seconds for monthly P/E data loading
                    print("   ‚úÖ ÊúàÂ∫¶Êú¨ÁõäÊØîÁâπÊÆäÊåâÈàïÈªûÊìäÂÆåÊàê Monthly P/E special button clicked [NEW!]")
                except TimeoutException:
                    print("   ‚ö†Ô∏è 'Êü•20Âπ¥' ÊåâÈàïÊú™ÊâæÂà∞ÔºåÁπºÁ∫åXLSÊêúÂ∞ã Button not found, proceeding with XLS search...")
            
            # IMPROVED: XLS download elements detection with 4-tier search
            print("Â∞ãÊâæ Looking for XLS download buttons...")
            
            xls_elements = []
            patterns = [
                "//a[contains(text(), 'XLS') or contains(text(), 'Excel') or contains(text(), 'ÂåØÂá∫')]",
                "//input[@type='button' and (contains(@value, 'XLS') or contains(@value, 'ÂåØÂá∫'))]",
                "//a[contains(@onclick, 'ExportToExcel') or contains(@onclick, 'Export')]",
                "//input[contains(@onclick, 'ExportToExcel') or contains(@onclick, 'Export')]"
            ]
            
            for pattern in patterns:
                try:
                    elements = WebDriverWait(driver, 5).until(
                        EC.presence_of_all_elements_located((By.XPATH, pattern))
                    )
                    for elem in elements:
                        if elem not in [x[1] for x in xls_elements]:
                            xls_elements.append(('element', elem))
                            text = elem.text or elem.get_attribute('value') or 'no-text'
                            print(f"   ‚úÖ ÊâæÂà∞XLSÂÖÉÁ¥† Found XLS element: '{text}'")
                except TimeoutException:
                    continue
            
            if not xls_elements:
                print("‚ùå Êú™ÊâæÂà∞XLS‰∏ãËºâÂÖÉÁ¥† No XLS download elements found")
                
                # Save debug info
                debug_file = f"debug_page_{stock_id}_{data_type_code}.html"
                with open(debug_file, "w", encoding="utf-8") as f:
                    f.write(driver.page_source)
                print(f"   üíæ Â∑≤ÂÑ≤Â≠òÈô§ÈåØÈ†ÅÈù¢ Debug page saved: {debug_file}")
                
                # Take debug screenshot
                try:
                    screenshot_file = f"debug_screenshot_{stock_id}_{data_type_code}.png"
                    driver.save_screenshot(screenshot_file)
                    print(f"   üì∏ Â∑≤ÂÑ≤Â≠òÈô§ÈåØÊà™Âúñ Debug screenshot saved: {screenshot_file}")
                except:
                    print("   ‚ö†Ô∏è ÁÑ°Ê≥ïÂÑ≤Â≠òÊà™Âúñ Cannot save screenshot")
                
                return False
            
            # IMPROVED: Download attempt with validation
            print(f"ÂòóË©¶ Attempting download with {len(xls_elements)} XLS elements...")
            
            success = False
            for i, (elem_type, element) in enumerate(xls_elements, 1):
                try:
                    element_text = element.text or element.get_attribute('value') or f'element_{i}'
                    print(f"   [{i}/{len(xls_elements)}] ÈªûÊìä Clicking: '{element_text}'")
                    
                    # Record files before download
                    pre_download_files = set()
                    if os.path.exists(download_dir):
                        pre_download_files = set(os.listdir(download_dir))
                    
                    # Click element
                    driver.execute_script("arguments[0].click();", element)
                    
                    # IMPROVED: Wait for download with validation
                    downloaded_file, file_path = wait_for_download_with_validation(
                        download_dir, ['.xls', '.xlsx'], timeout_seconds=15
                    )
                    
                    if downloaded_file and file_path:
                        # ENHANCED: Rename file appropriately including Type 12
                        if data_type_code == '7':
                            new_filename = f"{folder_name}_{stock_id}_{company_name}_quarter.xls"
                        else:
                            new_filename = f"{folder_name}_{stock_id}_{company_name}.xls"
                        
                        new_path = os.path.join(download_dir, new_filename)
                        
                        try:
                            if os.path.exists(new_path):
                                os.remove(new_path)
                            os.rename(file_path, new_path)
                            print(f"   ‚úÖ ‰∏ãËºâÊàêÂäü‰∏¶ÈáçÊñ∞ÂëΩÂêç Downloaded and renamed: {new_filename}")
                            if data_type_code == '11':
                                print(f"   üèÜ ÈÄ±‰∫§ÊòìË≥áÊñôÂê´‰∏âÂ§ßÊ≥ï‰∫∫‰∏ãËºâÂÆåÊàê Weekly trading data with institutional flows completed")
                            elif data_type_code == '12':
                                print(f"   üÜï ÊúàÂ∫¶Êú¨ÁõäÊØîÊï∏Êìö‰∏ãËºâÂÆåÊàê Monthly P/E data downloaded successfully [NEW!]")
                        except Exception as rename_error:
                            print(f"   ‚úÖ ‰∏ãËºâÊàêÂäü Downloaded: {downloaded_file}")
                            print(f"   ‚ö†Ô∏è ÈáçÊñ∞ÂëΩÂêçÂ§±Êïó Rename failed: {rename_error}")
                        
                        success = True
                        break
                    else:
                        print(f"   ‚ùå ÂÖÉÁ¥† {i} ‰∏ãËºâÂ§±Êïó Element {i} download failed")
                        
                except Exception as e:
                    print(f"   ‚ùå ÂÖÉÁ¥† {i} ÈªûÊìäÈåØË™§ Element {i} click error: {e}")
                    continue
            
            if success:
                print("üéâ ‰∏ãËºâÊµÅÁ®ãÂÆåÊàê Download process completed successfully")
                if data_type_code == '11':
                    print("üöÄ ÊÅ≠ÂñúÔºÅÊÇ®Â∑≤ÊàêÂäü‰∏ãËºâÂÆåÊï¥ÁöÑÈÄ±‰∫§ÊòìË≥áÊñôÂê´‰∏âÂ§ßÊ≥ï‰∫∫Êï∏Êìö")
                elif data_type_code == '12':
                    print("üöÄ ÊÅ≠ÂñúÔºÅÊÇ®Â∑≤ÊàêÂäü‰∏ãËºâ20Âπ¥ÊúàÂ∫¶Êú¨ÁõäÊØîÊï∏Êìö - ÊîØÊè¥Èï∑Êúü‰º∞ÂÄºÂàÜÊûêÔºÅ")
            else:
                print("‚ùå ÊâÄÊúâXLSÂÖÉÁ¥†ÂòóË©¶Â§±Êïó All XLS elements failed")
            
            return success
            
        finally:
            try:
                driver.quit()
                print("ÈóúÈñâ Chrome WebDriver closed")
            except:
                pass
        
    except ImportError:
        print("ÈåØË™§ Selenium not available. Install with: pip install selenium webdriver-manager")
        return False
    except Exception as e:
        print(f"ÈåØË™§ Selenium error: {e}")
        return False

def show_usage():
    """Show usage information with complete 12 data types"""
    print("=" * 70)
    print("GoodInfo.tw XLS File Downloader v2.0.0.0 - Complete 12 Data Types")
    print("Downloads XLS files with ENHANCED long-term valuation analysis")
    print("Uses StockID_TWSE_TPEX.csv for stock mapping")
    print("No Login Required! Complete 12 Data Types with Monthly P/E Analysis!")
    print("NEW: Type 12 - ÊØèÊúàEPSÊú¨ÁõäÊØî (EPS x PER Monthly for Long-Term Analysis)")
    print("=" * 70)
    print()
    print("Usage:")
    print("   python GetGoodInfo.py STOCK_ID DATA_TYPE")
    print()
    print("Examples:")
    print("   python GetGoodInfo.py 2330 1     # Âè∞Á©çÈõª dividend data")
    print("   python GetGoodInfo.py 0050 2     # ÂÖÉÂ§ßÂè∞ÁÅ£50 basic info")
    print("   python GetGoodInfo.py 2454 3     # ËÅØÁôºÁßë stock details")
    print("   python GetGoodInfo.py 2330 4     # Âè∞Á©çÈõª business performance")
    print("   python GetGoodInfo.py 2330 5     # Âè∞Á©çÈõª monthly revenue")
    print("   python GetGoodInfo.py 2330 6     # Âè∞Á©çÈõª equity distribution")
    print("   python GetGoodInfo.py 2330 7     # Âè∞Á©çÈõª quarterly performance")
    print("   python GetGoodInfo.py 2330 8     # Âè∞Á©çÈõª EPS x PER weekly")
    print("   python GetGoodInfo.py 2330 9     # Âè∞Á©çÈõª quarterly analysis")
    print("   python GetGoodInfo.py 2330 10    # Âè∞Á©çÈõª equity class weekly")
    print("   python GetGoodInfo.py 2330 11    # Âè∞Á©çÈõª weekly trading data")
    print("   python GetGoodInfo.py 2330 12    # Âè∞Á©çÈõª EPS x PER monthly [NEW!]")
    print()
    print("Data Types (Complete 12 Types - v2.0.0 ENHANCED):")
    print("   1 = Dividend Policy (ÊÆñÂà©ÁéáÊîøÁ≠ñ)")
    print("   2 = Basic Info (Âü∫Êú¨Ë≥áÊñô)")
    print("   3 = Stock Details (ÂÄãËÇ°Â∏ÇÊ≥Å)")
    print("   4 = Business Performance (Á∂ìÁáüÁ∏æÊïà)")
    print("   5 = Monthly Revenue (ÊØèÊúàÁáüÊî∂)")
    print("   6 = Equity Distribution (ËÇ°Ê¨äÁµêÊßã)")
    print("   7 = Quarterly Performance (ÊØèÂ≠£Á∂ìÁáüÁ∏æÊïà)")
    print("   8 = EPS x PER Weekly (ÊØèÈÄ±EPSÊú¨ÁõäÊØî)")
    print("   9 = Quarterly Analysis (ÂêÑÂ≠£Ë©≥Á¥∞Áµ±Ë®àË≥áÊñô)")
    print("   10 = Equity Class Weekly (ËÇ°Êù±ÊåÅËÇ°ÂàÜÈ°ûÈÄ±)")
    print("   11 = Weekly Trading Data (ÈÄ±‰∫§ÊòìË≥áÊñôÂê´‰∏âÂ§ßÊ≥ï‰∫∫)")
    print("   12 = EPS x PER Monthly (ÊØèÊúàEPSÊú¨ÁõäÊØî) [NEW!]")
    print()
    print("Type 12 Features (NEW!):")
    print("   ‚Ä¢ 20-year monthly EPS and P/E ratio data")
    print("   ‚Ä¢ Conservative P/E multiples (9X-19X) for long-term analysis")
    print("   ‚Ä¢ Monthly frequency for fundamental analysis")
    print("   ‚Ä¢ Backtesting support with extended historical coverage")
    print("   ‚Ä¢ Complements Type 8 weekly analysis (15X-30X multiples)")
    print("   ‚Ä¢ Long-term valuation modeling and portfolio management")
    print()
    print("ENHANCEMENTS:")
    print("   ‚Ä¢ Complete 12 data types with long-term valuation analysis")
    print("   ‚Ä¢ Better SSL error handling")
    print("   ‚Ä¢ Improved download validation")
    print("   ‚Ä¢ Enhanced Windows compatibility")
    print("   ‚Ä¢ More robust file detection")
    print("   ‚Ä¢ Better error reporting with screenshots")
    print()

def main():
    """Main function with ENHANCED error handling for complete 12 data types"""
    
    load_stock_names_from_csv()
    
    if len(sys.argv) != 3:
        show_usage()
        print("ÈåØË™§ Error: Please provide STOCK_ID and DATA_TYPE")
        print("   Example: python GetGoodInfo.py 2330 12")
        sys.exit(1)
    
    stock_id = sys.argv[1].strip()
    data_type_code = sys.argv[2].strip()
    
    if data_type_code not in DATA_TYPES:
        print(f"ÈåØË™§ Invalid data type: {data_type_code}")
        print("   Valid options: 1-12")
        sys.exit(1)
    
    page_type, folder_name, asp_file = DATA_TYPES[data_type_code]
    company_name = STOCK_NAMES.get(stock_id, f'ËÇ°Á•®{stock_id}')
    
    print("=" * 70)
    print("GoodInfo.tw XLS File Downloader v2.0.0.0 - Complete 12 Data Types")
    print("Downloads XLS files with ENHANCED long-term valuation analysis")
    print("Complete 12 Data Types with comprehensive monthly P/E data!")
    print("=" * 70)
    print(f"ËÇ°Á•® Stock: {stock_id} ({company_name})")
    print(f"È°ûÂûã Data Type: {page_type} ({DATA_TYPES[data_type_code][0]})")
    
    if data_type_code == '7':
        filename = f"{folder_name}_{stock_id}_{company_name}_quarter.xls"
    else:
        filename = f"{folder_name}_{stock_id}_{company_name}.xls"
    
    print(f"ÂÑ≤Â≠ò Save to: {folder_name}\\{filename}")
    
    # ENHANCED: Show workflow details for all special types including Type 12
    if data_type_code == '5':
        print("ÊµÅÁ®ã IMPROVED workflow: Click 'Êü•20Âπ¥' ‚Üí Wait 5s ‚Üí XLS download")
    elif data_type_code == '7':
        print("ÊµÅÁ®ã IMPROVED workflow: Special URL + Click 'Êü•60Âπ¥' ‚Üí Wait 5s ‚Üí XLS download")
    elif data_type_code == '8':
        print("ÊµÅÁ®ã IMPROVED workflow: Special URL + Click 'Êü•5Âπ¥' ‚Üí Wait 5s ‚Üí XLS download")
    elif data_type_code == '9':
        print("ÊµÅÁ®ã Standard workflow: Navigate to page ‚Üí XLS download")
    elif data_type_code == '10':
        print("ÊµÅÁ®ã IMPROVED workflow: Click 'Êü•5Âπ¥' ‚Üí Wait 5s ‚Üí XLS download")
    elif data_type_code == '11':
        print("ÊµÅÁ®ã ENHANCED workflow: Special URL + Click 'Êü•5Âπ¥' ‚Üí Wait 5s ‚Üí XLS download")
        print("ÂäüËÉΩ Features: OHLC + Volume + Institutional Flows + Margin Trading Data")
    elif data_type_code == '12':
        print("ÊµÅÁ®ã NEW! ENHANCED workflow: Special URL + Click 'Êü•20Âπ¥' ‚Üí Wait 5s ‚Üí XLS download")
        print("ÂäüËÉΩ Features: 20-Year Monthly P/E + Conservative Multiples (9X-19X) + Long-Term Analysis")
    
    print("=" * 70)
    
    start_time = time.time()
    success = selenium_download_xls_improved(stock_id, data_type_code)
    end_time = time.time()
    
    execution_time = end_time - start_time
    
    if success:
        print(f"\n‚úÖ ÂÆåÊàê Download completed successfully in {execution_time:.1f} seconds!")
        print(f"Ê™¢Êü• Check the '{folder_name}' folder for your XLS file")
        
        if data_type_code == '11':
            print("üéä ÊÅ≠ÂñúÊÇ®ÊàêÂäü‰∏ãËºâ‰∫ÜÂÖ®Êñ∞ÁöÑÈÄ±‰∫§ÊòìË≥áÊñôÂê´‰∏âÂ§ßÊ≥ï‰∫∫Êï∏ÊìöÔºÅ")
            print("üìä This includes comprehensive institutional trading analysis!")
        elif data_type_code == '12':
            print("üéä ÊÅ≠ÂñúÊÇ®ÊàêÂäü‰∏ãËºâ‰∫Ü20Âπ¥ÊúàÂ∫¶Êú¨ÁõäÊØîÊï∏ÊìöÔºÅ")
            print("üìà This includes 20-year monthly P/E analysis for long-term investment strategies!")
        
        # IMPROVED: Verify file actually exists and provide details
        expected_path = os.path.join(folder_name, filename)
        if os.path.exists(expected_path):
            file_size = os.path.getsize(expected_path)
            file_time = datetime.fromtimestamp(os.path.getmtime(expected_path))
            print(f"È©óË≠â File verified: {file_size} bytes, modified {file_time}")
        else:
            print("‚ö†Ô∏è Ë≠¶Âëä Warning: Expected file not found at exact path")
            
    else:
        print(f"\n‚ùå Â§±Êïó Download failed for {stock_id} after {execution_time:.1f} seconds")
        print("Èô§ÈåØ Debug files saved - check debug_page_*.html and debug_screenshot_*.png")
        print("Âª∫Ë≠∞ Suggestions:")
        print("   ‚Ä¢ Check network connection")
        print("   ‚Ä¢ Verify stock ID is valid")
        print("   ‚Ä¢ Try running again (temporary network issues)")
        if data_type_code in ['5', '7', '8', '10', '11', '12']:
            print(f"ÊèêÁ§∫ Type {data_type_code} uses special workflow - check button availability")
        if data_type_code == '11':
            print("Ê©üÊßãÊï∏ÊìöÊèêÁ§∫ Type 11 includes institutional flows - if issues persist, try other data types first")
        if data_type_code == '12':
            print("Êñ∞ÂäüËÉΩÊèêÁ§∫ Type 12 is NEW! 20-year monthly P/E data - if issues persist, try weekly Type 8 first")
        
        # Exit with error code for batch processing
        sys.exit(1)

if __name__ == "__main__":
    main()