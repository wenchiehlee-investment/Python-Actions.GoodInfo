name: GoodInfo Downloader v1.8.0

on:
  # Complete 7-Day Weekly + Daily Automation - Perfect scheduling for optimal server performance (v1.8.0)
  schedule:
    # Complete weekly rotation at 8 AM UTC (4 PM Taiwan) - One type per day across 7 days
    - cron: '0 8 * * 1'    # Monday at 8 AM UTC (4 PM Taiwan) - Dividend Policy (Type 1)
    - cron: '0 8 * * 2'    # Tuesday at 8 AM UTC (4 PM Taiwan) - Business Performance (Type 4)
    - cron: '0 8 * * 3'    # Wednesday at 8 AM UTC (4 PM Taiwan) - Equity Distribution (Type 6)
    - cron: '0 8 * * 4'    # Thursday at 8 AM UTC (4 PM Taiwan) - Quarterly Performance (Type 7)
    - cron: '0 8 * * 5'    # Friday at 8 AM UTC (4 PM Taiwan) - EPS x PER Weekly (Type 8)
    - cron: '0 8 * * 6'    # Saturday at 8 AM UTC (4 PM Taiwan) - Quarterly Analysis (Type 9)
    - cron: '0 8 * * 0'    # Sunday at 8 AM UTC (4 PM Taiwan) - Equity Class Weekly (Type 10) - NEW!
    
    # Daily run - Type 5 continues daily (most time-sensitive)
    - cron: '0 12 * * *'   # Daily at 12 PM UTC (8 PM Taiwan) - Monthly Revenue (Type 5)
  
  # Allow manual trigger for all 10 data types (v1.8.0)
  workflow_dispatch:
    inputs:
      data_type:
        description: 'Data type to download (1-10)'
        required: false
        default: '1'
        type: choice
        options:
        - '1'   # Dividend Policy
        - '2'   # Basic Info
        - '3'   # Stock Details
        - '4'   # Business Performance
        - '5'   # Monthly Revenue
        - '6'   # Equity Distribution
        - '7'   # Quarterly Performance
        - '8'   # EPS x PER Weekly
        - '9'   # Quarterly Analysis
        - '10'  # Equity Class Weekly - NEW!
      test_mode:
        description: 'Test mode (only first 3 stocks)'
        required: false
        default: false
        type: boolean

jobs:
  download:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 5 hours max for complex workflows
    outputs:
      data_type: ${{ steps.params.outputs.data_type }}
      data_desc: ${{ steps.params.outputs.data_desc }}
      total_files: ${{ steps.summary.outputs.total_files }}
      duration: ${{ steps.summary.outputs.duration }}
      start_time: ${{ steps.summary.outputs.start_time }}
      end_time: ${{ steps.summary.outputs.end_time }}
      total_stocks: ${{ steps.summary.outputs.total_stocks }}
      success_stocks: ${{ steps.summary.outputs.success_stocks }}
      failed_stocks: ${{ steps.summary.outputs.failed_stocks }}
    steps:
    - name: Record Start Time
      id: start
      run: |
        START_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        START_TIMESTAMP=$(date -u +%s)
        echo "start_time=$START_TIME" >> $GITHUB_OUTPUT
        echo "start_timestamp=$START_TIMESTAMP" >> $GITHUB_OUTPUT
        echo "Workflow started at: $START_TIME"
    
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
    
    - name: Setup Chrome
      run: |
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable xvfb
    
    - name: Download Stock List
      run: |
        echo "Downloading latest Taiwan stock observation list..."
        python Get觀察名單.py
        
        echo "Stock list status:"
        if [ -f "StockID_TWSE_TPEX.csv" ]; then
          echo "Stock list downloaded successfully"
          STOCK_COUNT=$(tail -n +2 StockID_TWSE_TPEX.csv | wc -l)
          echo "Total stocks: $STOCK_COUNT"
          echo "First 5 stocks:"
          head -6 StockID_TWSE_TPEX.csv
          echo "stock_count=$STOCK_COUNT" >> $GITHUB_OUTPUT
        else
          echo "Failed to download stock list"
          exit 1
        fi
    
    - name: Determine Execution Parameters
      id: params
      run: |
        # Determine data type based on trigger (Updated for v1.8.0 with Type 10)
        if [[ "${{ github.event_name }}" == "schedule" ]]; then
          # For scheduled runs, determine type by day of week and hour
          HOUR=$(date -u +%H)
          DAY_OF_WEEK=$(date -u +%u)  # 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday, 7=Sunday
          
          if [[ "$HOUR" == "08" ]]; then
            # 8 AM UTC - Weekly types based on day of week
            case $DAY_OF_WEEK in
              1) DATA_TYPE="1"; TYPE_NAME="Dividend Policy"; FREQUENCY="Weekly-Mon" ;;
              2) DATA_TYPE="4"; TYPE_NAME="Business Performance"; FREQUENCY="Weekly-Tue" ;;
              3) DATA_TYPE="6"; TYPE_NAME="Equity Distribution"; FREQUENCY="Weekly-Wed" ;;
              4) DATA_TYPE="7"; TYPE_NAME="Quarterly Performance"; FREQUENCY="Weekly-Thu" ;;
              5) DATA_TYPE="8"; TYPE_NAME="EPS x PER Weekly"; FREQUENCY="Weekly-Fri" ;;
              6) DATA_TYPE="9"; TYPE_NAME="Quarterly Analysis"; FREQUENCY="Weekly-Sat" ;;
              7) DATA_TYPE="10"; TYPE_NAME="Equity Class Weekly"; FREQUENCY="Weekly-Sun" ;;
              *) DATA_TYPE="1"; TYPE_NAME="Dividend Policy"; FREQUENCY="Weekly-Default" ;;
            esac
          elif [[ "$HOUR" == "12" ]]; then
            DATA_TYPE="5"
            TYPE_NAME="Monthly Revenue"
            FREQUENCY="Daily"
          else
            DATA_TYPE="1"
            TYPE_NAME="Dividend Policy"
            FREQUENCY="Fallback"
          fi
          TRIGGER_TYPE="Auto"
        else
          # Manual trigger - use input
          DATA_TYPE="${{ github.event.inputs.data_type || '1' }}"
          TRIGGER_TYPE="Manual"
          FREQUENCY="On-Demand"
          
          # Set type names for manual triggers (Updated for Type 10)
          case $DATA_TYPE in
            1) TYPE_NAME="Dividend Policy" ;;
            2) TYPE_NAME="Basic Info" ;;
            3) TYPE_NAME="Stock Details" ;;
            4) TYPE_NAME="Business Performance" ;;
            5) TYPE_NAME="Monthly Revenue" ;;
            6) TYPE_NAME="Equity Distribution" ;;
            7) TYPE_NAME="Quarterly Performance" ;;
            8) TYPE_NAME="EPS x PER Weekly" ;;
            9) TYPE_NAME="Quarterly Analysis" ;;
            10) TYPE_NAME="Equity Class Weekly" ;;
          esac
        fi
        
        echo "data_type=$DATA_TYPE" >> $GITHUB_OUTPUT
        echo "data_desc=$TYPE_NAME" >> $GITHUB_OUTPUT
        echo "type_name=$TYPE_NAME" >> $GITHUB_OUTPUT
        echo "frequency=$FREQUENCY" >> $GITHUB_OUTPUT
        echo "trigger_type=$TRIGGER_TYPE" >> $GITHUB_OUTPUT
        
        # Set test mode flag
        if [[ "${{ github.event.inputs.test_mode }}" == "true" ]]; then
          echo "test_flag=--test" >> $GITHUB_OUTPUT
          echo "mode_desc=Test Mode (3 stocks)" >> $GITHUB_OUTPUT
          TEST_MODE="Test"
        else
          echo "test_flag=" >> $GITHUB_OUTPUT
          echo "mode_desc=Full Mode (all stocks)" >> $GITHUB_OUTPUT
          TEST_MODE="Full"
        fi
        
        echo "test_mode=$TEST_MODE" >> $GITHUB_OUTPUT
        
        # Update step name to show current execution info
        echo "Executing: Type $DATA_TYPE ($TYPE_NAME) | $FREQUENCY | $TEST_MODE Mode"
    - name: Execute Data Download - Type ${{ steps.params.outputs.data_type }} (${{ steps.params.outputs.type_name }})
      id: download
      timeout-minutes: 300  # 🔥 5 hours instead of workflow's 6-hour limit
      continue-on-error: true  # 🔥 Don't fail entire workflow if this times out
      run: |
        export DISPLAY=:99
        Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
        sleep 3
        
        echo "Starting download execution..."
        echo "Data Type: ${{ steps.params.outputs.type_name }} (Type ${{ steps.params.outputs.data_type }})"
        echo "Frequency: ${{ steps.params.outputs.frequency }}"
        echo "Mode: ${{ steps.params.outputs.mode_desc }}"
        echo "Trigger: ${{ steps.params.outputs.trigger_type }}"
        echo "Version: v1.8.0 - Complete 10 Data Types"
        echo "Timeout: 300 minutes (5 hours)"
        
        # Show special workflow information for enhanced types (Updated for Type 10)
        case "${{ steps.params.outputs.data_type }}" in
          5) echo "Special Workflow: Monthly Revenue - Auto-click 查20年 button" ;;
          6) echo "Equity Distribution - Shareholder structure analysis" ;;
          7) echo "Special Workflow: Quarterly Performance - Special URL + Auto-click 查60年 button" ;;
          8) echo "Special Workflow: EPS x PER Weekly - Special URL + Auto-click 查5年 button" ;;
          9) echo "Standard Workflow: Quarterly Analysis - 4-quarter detailed statistical data" ;;
          10) echo "Special Workflow: Equity Class Weekly - Auto-click 查5年 button" ;;
        esac
        
        echo "=========================================="
        
        # Record download start time
        DOWNLOAD_START=$(date -u +%s)
        
        # Run GetAll.py with parameters
        set +e  # Disable exit on error
        python GetAll.py ${{ steps.params.outputs.data_type }} ${{ steps.params.outputs.test_flag }} 
        SCRIPT_EXIT_CODE=$?
        set -e  # Re-enable exit on error
        
        # Record download end time
        DOWNLOAD_END=$(date -u +%s)
        DOWNLOAD_DURATION=$((DOWNLOAD_END - DOWNLOAD_START))
        
        echo "download_duration=$DOWNLOAD_DURATION" >> $GITHUB_OUTPUT
        echo "script_exit_code=$SCRIPT_EXIT_CODE" >> $GITHUB_OUTPUT
        
        echo "=========================================="
        echo "Download execution completed"
        echo "Script exit code: $SCRIPT_EXIT_CODE"
        echo "Download duration: ${DOWNLOAD_DURATION}s"
        
        # Check if we hit timeout
        if [ $DOWNLOAD_DURATION -ge 18000 ]; then  # 18000s = 5 hours
          echo "⚠️ Download hit timeout limit (5 hours)"
          echo "download_status=TIMEOUT" >> $GITHUB_OUTPUT
        elif [ $SCRIPT_EXIT_CODE -eq 0 ]; then
          echo "✅ Download completed successfully"
          echo "download_status=SUCCESS" >> $GITHUB_OUTPUT
        else
          echo "❌ Download failed with exit code: $SCRIPT_EXIT_CODE"
          echo "download_status=FAILED" >> $GITHUB_OUTPUT
        fi

    - name: Calculate File Summary
      id: file_summary
      if: always()  # Always run to capture partial results
      run: |
        echo "Calculating file summary for all data types..."
        echo "Previous step status: ${{ steps.download.outputs.download_status || 'UNKNOWN' }}"
        
        # Initialize variables with default values
        TOTAL_FILES=0
        CURRENT_TYPE_FILES=0
        TOTAL_STOCKS=0
        PROCESSED_STOCKS=0
        SUCCESS_STOCKS=0
        FAILED_STOCKS=0
        
        # Function to count files safely
        count_files() {
          local folder="$1"
          local name="$2"
          
          if [ -d "$folder" ]; then
            local count=$(find "$folder" -name "*.xls*" 2>/dev/null | wc -l || echo "0")
            echo "$name files: $count"
            TOTAL_FILES=$((TOTAL_FILES + count))
            
            # If this is the current data type folder, save count
            case "${{ steps.params.outputs.data_type }}" in
              1) if [ "$folder" = "DividendDetail" ]; then CURRENT_TYPE_FILES=$count; fi ;;
              2) if [ "$folder" = "BasicInfo" ]; then CURRENT_TYPE_FILES=$count; fi ;;
              3) if [ "$folder" = "StockDetail" ]; then CURRENT_TYPE_FILES=$count; fi ;;
              4) if [ "$folder" = "StockBzPerformance" ]; then CURRENT_TYPE_FILES=$count; fi ;;
              5) if [ "$folder" = "ShowSaleMonChart" ]; then CURRENT_TYPE_FILES=$count; fi ;;
              6) if [ "$folder" = "EquityDistribution" ]; then CURRENT_TYPE_FILES=$count; fi ;;
              7) if [ "$folder" = "StockBzPerformance1" ]; then CURRENT_TYPE_FILES=$count; fi ;;
              8) if [ "$folder" = "ShowK_ChartFlow" ]; then CURRENT_TYPE_FILES=$count; fi ;;
              9) if [ "$folder" = "StockHisAnaQuar" ]; then CURRENT_TYPE_FILES=$count; fi ;;
              10) if [ "$folder" = "EquityDistributionClassHis" ]; then CURRENT_TYPE_FILES=$count; fi ;;
            esac
          else
            echo "$name files: 0 (folder not created)"
          fi
        }
        
        # Count files for all 10 data types (Updated for v1.8.0)
        count_files "DividendDetail" "Dividend"
        count_files "BasicInfo" "Basic info"
        count_files "StockDetail" "Stock detail"
        count_files "StockBzPerformance" "Business performance"
        count_files "ShowSaleMonChart" "Monthly revenue"
        count_files "EquityDistribution" "Equity distribution"
        count_files "StockBzPerformance1" "Quarterly performance"
        count_files "ShowK_ChartFlow" "EPS x PER weekly"
        count_files "StockHisAnaQuar" "Quarterly analysis"
        count_files "EquityDistributionClassHis" "Equity class weekly"
        
        echo "Total XLS files across all data types: $TOTAL_FILES"
        echo "Current type files: $CURRENT_TYPE_FILES"
        
        # Parse download results for current data type (Updated for Type 10)
        CURRENT_FOLDER=""
        case "${{ steps.params.outputs.data_type }}" in
          1) CURRENT_FOLDER="DividendDetail" ;;
          2) CURRENT_FOLDER="BasicInfo" ;;
          3) CURRENT_FOLDER="StockDetail" ;;
          4) CURRENT_FOLDER="StockBzPerformance" ;;
          5) CURRENT_FOLDER="ShowSaleMonChart" ;;
          6) CURRENT_FOLDER="EquityDistribution" ;;
          7) CURRENT_FOLDER="StockBzPerformance1" ;;
          8) CURRENT_FOLDER="ShowK_ChartFlow" ;;
          9) CURRENT_FOLDER="StockHisAnaQuar" ;;
          10) CURRENT_FOLDER="EquityDistributionClassHis" ;;
        esac
        
        # Extract stock processing statistics safely
        if [ -f "$CURRENT_FOLDER/download_results.csv" ] && [ -n "$CURRENT_FOLDER" ]; then
          echo ""
          echo "Stock Processing Summary:"
          
          # Parse CSV to get statistics with safe defaults and proper integer handling
          TOTAL_STOCKS=$(tail -n +2 "$CURRENT_FOLDER/download_results.csv" 2>/dev/null | wc -l 2>/dev/null | tr -d '\n' | tr -d ' ')
          TOTAL_STOCKS=${TOTAL_STOCKS:-0}
          PROCESSED_STOCKS=$TOTAL_STOCKS
          
          # Count success and failures with explicit integer conversion
          if [ -f "$CURRENT_FOLDER/download_results.csv" ]; then
            SUCCESS_COUNT=$(tail -n +2 "$CURRENT_FOLDER/download_results.csv" 2>/dev/null | grep ",true" 2>/dev/null | wc -l 2>/dev/null | tr -d '\n' | tr -d ' ')
            FAILED_COUNT=$(tail -n +2 "$CURRENT_FOLDER/download_results.csv" 2>/dev/null | grep ",false" 2>/dev/null | wc -l 2>/dev/null | tr -d '\n' | tr -d ' ')
          else
            SUCCESS_COUNT="0"
            FAILED_COUNT="0"
          fi
          
          # Ensure variables are clean integers
          SUCCESS_STOCKS=$(echo "${SUCCESS_COUNT:-0}" | sed 's/[^0-9]//g')
          FAILED_STOCKS=$(echo "${FAILED_COUNT:-0}" | sed 's/[^0-9]//g')
          SUCCESS_STOCKS=${SUCCESS_STOCKS:-0}
          FAILED_STOCKS=${FAILED_STOCKS:-0}
          
          echo "Total stocks: $TOTAL_STOCKS"
          echo "Processed: $PROCESSED_STOCKS stocks"
          echo "Successful: $SUCCESS_STOCKS"
          echo "Failed: $FAILED_STOCKS"
          
          # Calculate success rate safely with explicit integer check
          if [ "$TOTAL_STOCKS" -gt 0 ] 2>/dev/null && [ "$SUCCESS_STOCKS" -ge 0 ] 2>/dev/null; then
            SUCCESS_RATE=$(expr $SUCCESS_STOCKS \* 100 / $TOTAL_STOCKS 2>/dev/null || echo "0")
            echo "Success rate: ${SUCCESS_RATE}%"
          fi
        elif [ -f "StockID_TWSE_TPEX.csv" ]; then
          # Fallback to stock list if download_results.csv doesn't exist
          TOTAL_STOCKS=$(tail -n +2 StockID_TWSE_TPEX.csv 2>/dev/null | wc -l || echo "0")
          echo ""
          echo "Stock Processing Summary (from stock list):"
          echo "Total stocks: $TOTAL_STOCKS"
          echo "Processing status: In progress or failed early"
        fi
        
        # Export outputs with safe defaults
        echo "total_files=${TOTAL_FILES:-0}" >> $GITHUB_OUTPUT
        echo "current_type_files=${CURRENT_TYPE_FILES:-0}" >> $GITHUB_OUTPUT
        echo "total_stocks=${TOTAL_STOCKS:-0}" >> $GITHUB_OUTPUT
        echo "success_stocks=${SUCCESS_STOCKS:-0}" >> $GITHUB_OUTPUT
        echo "failed_stocks=${FAILED_STOCKS:-0}" >> $GITHUB_OUTPUT
        echo "processed_stocks=${PROCESSED_STOCKS:-0}" >> $GITHUB_OUTPUT
        
        # Show folder structure (Updated for v1.8.0)
        echo ""
        echo "Complete folder structure (v1.8.0):"
        for folder in DividendDetail BasicInfo StockDetail StockBzPerformance ShowSaleMonChart EquityDistribution StockBzPerformance1 ShowK_ChartFlow StockHisAnaQuar EquityDistributionClassHis; do
          if [ -d "$folder" ]; then
            echo "   $folder/ (exists)"
          else
            echo "   $folder/ (not created yet)"
          fi
        done

    - name: Generate download_results_counts and update to README.md
      if: always()  # Always run to update README with current status
      run: |
        python download_results_counts.py --update-readme

    - name: Commit and Push Results
      id: commit
      if: always()  # Always run to save any progress made
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

        # 🔄 PULL LATEST CHANGES FIRST to avoid conflicts
        echo "Fetching latest changes from remote..."
        git fetch origin
        
        echo "Pulling latest changes..."
        if git pull origin main; then
          echo "✅ Successfully pulled latest changes"
        else
          echo "⚠️ Pull had conflicts or failed, will attempt to resolve..."
          # Try to reset and pull again
          git reset --hard HEAD
          git pull origin main || echo "Pull still failed, continuing with commit attempt..."
        fi

        # Add files with better error handling
        echo "Adding files to git..."
        git add README.md || true
        
        # Add updated stock list
        git add StockID_TWSE_TPEX.csv || true
        
        # Add downloaded XLS files for all 10 data types (v1.8.0) with safe file checking
        echo "Adding data type files..."
        
        # Type 1: Dividend Policy
        if [ -d "DividendDetail" ]; then
          find DividendDetail -name "*.xls*" -exec git add {} + 2>/dev/null || true
          [ -f "DividendDetail/download_results.csv" ] && git add DividendDetail/download_results.csv || true
        fi
        
        # Type 2: Basic Info
        if [ -d "BasicInfo" ]; then
          find BasicInfo -name "*.xls*" -exec git add {} + 2>/dev/null || true
          [ -f "BasicInfo/download_results.csv" ] && git add BasicInfo/download_results.csv || true
        fi
        
        # Type 3: Stock Details
        if [ -d "StockDetail" ]; then
          find StockDetail -name "*.xls*" -exec git add {} + 2>/dev/null || true
          [ -f "StockDetail/download_results.csv" ] && git add StockDetail/download_results.csv || true
        fi
        
        # Type 4: Business Performance
        if [ -d "StockBzPerformance" ]; then
          find StockBzPerformance -name "*.xls*" -exec git add {} + 2>/dev/null || true
          [ -f "StockBzPerformance/download_results.csv" ] && git add StockBzPerformance/download_results.csv || true
        fi
        
        # Type 5: Monthly Revenue - Clean up unwanted files first
        if [ -d "ShowSaleMonChart" ]; then
          rm -f ShowSaleMonChart/SaleMonDetail*.xls 2>/dev/null || true
          find ShowSaleMonChart -name "*.xls*" -exec git add {} + 2>/dev/null || true
          [ -f "ShowSaleMonChart/download_results.csv" ] && git add ShowSaleMonChart/download_results.csv || true
        fi
        
        # Type 6: Equity Distribution
        if [ -d "EquityDistribution" ]; then
          find EquityDistribution -name "*.xls*" -exec git add {} + 2>/dev/null || true
          [ -f "EquityDistribution/download_results.csv" ] && git add EquityDistribution/download_results.csv || true
        fi
        
        # Type 7: Quarterly Performance
        if [ -d "StockBzPerformance1" ]; then
          find StockBzPerformance1 -name "*.xls*" -exec git add {} + 2>/dev/null || true
          [ -f "StockBzPerformance1/download_results.csv" ] && git add StockBzPerformance1/download_results.csv || true
        fi
        
        # Type 8: EPS x PER Weekly
        if [ -d "ShowK_ChartFlow" ]; then
          find ShowK_ChartFlow -name "*.xls*" -exec git add {} + 2>/dev/null || true
          [ -f "ShowK_ChartFlow/download_results.csv" ] && git add ShowK_ChartFlow/download_results.csv || true
        fi
        
        # Type 9: Quarterly Analysis
        if [ -d "StockHisAnaQuar" ]; then
          find StockHisAnaQuar -name "*.xls*" -exec git add {} + 2>/dev/null || true
          [ -f "StockHisAnaQuar/download_results.csv" ] && git add StockHisAnaQuar/download_results.csv || true
        fi

        # Type 10: Equity Class Weekly (v1.8.0)
        if [ -d "EquityDistributionClassHis" ]; then
          find EquityDistributionClassHis -name "*.xls*" -exec git add {} + 2>/dev/null || true
          [ -f "EquityDistributionClassHis/download_results.csv" ] && git add EquityDistributionClassHis/download_results.csv || true
        fi

        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "Changes detected, preparing commit..."
          
          # Create enhanced commit message based on download status
          case "${{ steps.download.outputs.download_status }}" in
            "SUCCESS")
              COMMIT_MSG="✅ Update ${{ steps.params.outputs.type_name }} Data [COMPLETED]"
              ;;
            "TIMEOUT")
              COMMIT_MSG="⏰ Partial Update ${{ steps.params.outputs.type_name }} Data [TIMEOUT at 5h]"
              ;;
            "FAILED")
              COMMIT_MSG="❌ Partial Update ${{ steps.params.outputs.type_name }} Data [FAILED]"
              ;;
            *)
              COMMIT_MSG="🔄 Update ${{ steps.params.outputs.type_name }} Data [UNKNOWN STATUS]"
              ;;
          esac
          
          # Add file count and duration to commit message
          COMMIT_MSG="$COMMIT_MSG (${{ steps.file_summary.outputs.current_type_files }} files"
          
          # Add duration if available
          if [[ "${{ steps.download.outputs.download_duration }}" != "" ]]; then
            DURATION_HOURS=$((${{ steps.download.outputs.download_duration }} / 3600))
            DURATION_MINUTES=$(((${{ steps.download.outputs.download_duration }} % 3600) / 60))
            if [ $DURATION_HOURS -gt 0 ]; then
              COMMIT_MSG="$COMMIT_MSG, ${DURATION_HOURS}h${DURATION_MINUTES}m"
            else
              COMMIT_MSG="$COMMIT_MSG, ${DURATION_MINUTES}m"
            fi
          fi
          
          COMMIT_MSG="$COMMIT_MSG)"
          
          # Add mode and trigger info
          if [[ "${{ steps.params.outputs.test_flag }}" == "--test" ]]; then
            COMMIT_MSG="$COMMIT_MSG [Test]"
          fi
          
          COMMIT_MSG="$COMMIT_MSG [${{ steps.params.outputs.trigger_type }}-v1.8.0]"
          COMMIT_MSG="$COMMIT_MSG - $(date '+%Y-%m-%d %H:%M UTC')"
          
          # Commit the changes
          echo "Committing changes..."
          if git commit -m "$COMMIT_MSG"; then
            echo "✅ Commit successful"
          else
            echo "❌ Commit failed"
            echo "has_changes=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Push with retry logic (3 attempts)
          echo "Pushing changes to remote..."
          PUSH_SUCCESS=false
          
          for attempt in {1..3}; do
            echo "Push attempt $attempt of 3..."
            
            if git push origin main; then
              echo "✅ Push successful on attempt $attempt"
              PUSH_SUCCESS=true
              break
            else
              echo "❌ Push failed on attempt $attempt"
              
              if [ $attempt -lt 3 ]; then
                echo "Preparing for retry..."
                # Fetch and try to rebase
                git fetch origin
                
                if git rebase origin/main; then
                  echo "✅ Rebase successful, retrying push..."
                else
                  echo "❌ Rebase failed, trying merge..."
                  git rebase --abort 2>/dev/null || true
                  
                  if git merge origin/main; then
                    echo "✅ Merge successful, retrying push..."
                  else
                    echo "❌ Merge failed, will retry push as-is..."
                  fi
                fi
                
                sleep $((attempt * 2))  # Progressive delay: 2s, 4s, 6s
              fi
            fi
          done
          
          if [ "$PUSH_SUCCESS" = true ]; then
            echo "✅ Changes committed and pushed successfully"
            echo "📝 Commit message: $COMMIT_MSG"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "commit_message=$COMMIT_MSG" >> $GITHUB_OUTPUT
            echo "push_status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ All push attempts failed, but changes were committed locally"
            echo "📝 Commit message: $COMMIT_MSG"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "commit_message=$COMMIT_MSG" >> $GITHUB_OUTPUT
            echo "push_status=failed" >> $GITHUB_OUTPUT
          fi
        fi
    - name: Generate Execution Summary
      id: summary
      if: always()
      run: |
        # Calculate total duration
        END_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        END_TIMESTAMP=$(date -u +%s)
        TOTAL_DURATION=$((END_TIMESTAMP - ${{ steps.start.outputs.start_timestamp }}))
        
        # Export summary data
        echo "end_time=$END_TIME" >> $GITHUB_OUTPUT
        echo "start_time=${{ steps.start.outputs.start_time }}" >> $GITHUB_OUTPUT
        echo "duration=${TOTAL_DURATION}s" >> $GITHUB_OUTPUT
        echo "total_files=${{ steps.file_summary.outputs.total_files }}" >> $GITHUB_OUTPUT
        echo "total_stocks=${{ steps.file_summary.outputs.total_stocks }}" >> $GITHUB_OUTPUT
        echo "success_stocks=${{ steps.file_summary.outputs.success_stocks }}" >> $GITHUB_OUTPUT
        echo "failed_stocks=${{ steps.file_summary.outputs.failed_stocks }}" >> $GITHUB_OUTPUT
        
        # Generate summary report (Updated for v1.8.0)
        cat >> $GITHUB_STEP_SUMMARY << EOF
        # GoodInfo Downloader Execution Summary
        
        ## Execution Details
        | Attribute | Value |
        |-----------|-------|
        | **Data Type** | Type ${{ steps.params.outputs.data_type }} - ${{ steps.params.outputs.type_name }} |
        | **Frequency** | ${{ steps.params.outputs.frequency }} |
        | **Trigger** | ${{ steps.params.outputs.trigger_type }} |
        | **Mode** | ${{ steps.params.outputs.test_mode }} Mode |
        | **Version** | v1.8.0 - Complete 10 Data Types |
        
        ## Timing Information
        | Metric | Value |
        |--------|-------|
        | **Start Time** | ${{ steps.start.outputs.start_time }} |
        | **End Time** | $END_TIME |
        | **Total Duration** | ${TOTAL_DURATION}s ($(printf '%02d:%02d:%02d' $((TOTAL_DURATION/3600)) $(((TOTAL_DURATION%3600)/60)) $((TOTAL_DURATION%60)))) |
        | **Download Duration** | ${{ steps.download.outputs.download_duration }}s |
        
        ## File Summary
        | Metric | Count |
        |--------|-------|
        | **Current Type Files** | ${{ steps.file_summary.outputs.current_type_files }} |
        | **Total Files (All Types)** | ${{ steps.file_summary.outputs.total_files }} |
        | **Git Changes** | ${{ steps.commit.outputs.has_changes == 'true' && 'Yes' || 'No' }} |
        
        ## Stock Processing Summary
        | Metric | Count |
        |--------|-------|
        | **Total Stocks** | ${{ steps.file_summary.outputs.total_stocks }} |
        | **Processed** | ${{ steps.file_summary.outputs.processed_stocks }} stocks |
        | **Successful** | ${{ steps.file_summary.outputs.success_stocks }} |
        | **Failed** | ${{ steps.file_summary.outputs.failed_stocks }} |
        
        ## Performance Status
        - Workflow Status: ${{ job.status }}
        - Download Status: ${{ steps.download.outputs.script_exit_code == '0' && 'Success' || 'Warning' }}
        - Repository: [${{ github.repository }}](https://github.com/${{ github.repository }})
        - Run ID: [\#${{ github.run_number }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
        
        ---
        *Generated by GoodInfo Downloader v1.8.0 with Complete 10 Data Types*
        EOF
        
        # Also output to console for logs (Updated for v1.8.0)
        echo "=== Execution Summary (v1.8.0) ==="
        echo "Data Type: ${{ steps.params.outputs.type_name }} (Type ${{ steps.params.outputs.data_type }})"
        echo "Duration: ${TOTAL_DURATION}s"
        echo "Files: ${{ steps.file_summary.outputs.current_type_files }} (current type), ${{ steps.file_summary.outputs.total_files }} (total)"
        echo "Stocks: ${{ steps.file_summary.outputs.success_stocks }}/${{ steps.file_summary.outputs.total_stocks }} successful"
        echo "Frequency: ${{ steps.params.outputs.frequency }}"
        echo "Status: Completed"